"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mendoza";
exports.ids = ["vendor-chunks/mendoza"];
exports.modules = {

/***/ "(ssr)/./node_modules/mendoza/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/mendoza/dist/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyPatch: () => (/* binding */ applyPatch),\n/* harmony export */   incremental: () => (/* binding */ incrementalPatcher)\n/* harmony export */ });\nvar __defProp$1 = Object.defineProperty;\nvar __defNormalProp$1 = (obj, key, value)=>key in obj ? __defProp$1(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField$1 = (obj, key, value)=>{\n    __defNormalProp$1(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nconst OPS = [\n    \"Value\",\n    \"Copy\",\n    \"Blank\",\n    \"ReturnIntoArray\",\n    \"ReturnIntoObject\",\n    \"ReturnIntoObjectSameKey\",\n    \"PushField\",\n    \"PushElement\",\n    \"PushParent\",\n    \"Pop\",\n    \"PushFieldCopy\",\n    \"PushFieldBlank\",\n    \"PushElementCopy\",\n    \"PushElementBlank\",\n    \"ReturnIntoObjectPop\",\n    \"ReturnIntoObjectSameKeyPop\",\n    \"ReturnIntoArrayPop\",\n    \"ObjectSetFieldValue\",\n    \"ObjectCopyField\",\n    \"ObjectDeleteField\",\n    \"ArrayAppendValue\",\n    \"ArrayAppendSlice\",\n    \"StringAppendString\",\n    \"StringAppendSlice\"\n];\nclass Patcher {\n    constructor(model, root, patch){\n        __publicField$1(this, \"model\");\n        __publicField$1(this, \"root\");\n        __publicField$1(this, \"patch\");\n        __publicField$1(this, \"i\");\n        __publicField$1(this, \"inputStack\");\n        __publicField$1(this, \"outputStack\");\n        this.model = model;\n        this.root = root;\n        this.patch = patch;\n        this.i = 0;\n        this.inputStack = [];\n        this.outputStack = [];\n    }\n    read() {\n        return this.patch[this.i++];\n    }\n    process() {\n        this.inputStack.push({\n            value: this.root\n        });\n        this.outputStack.push({\n            value: this.root\n        });\n        for(; this.i < this.patch.length;){\n            let opcode = this.read();\n            let op = OPS[opcode];\n            if (!op) throw new Error(\"Unknown opcode: \".concat(opcode));\n            let processor = \"process\".concat(op);\n            this[processor].apply(this);\n        }\n        let entry = this.outputStack.pop();\n        return this.finalizeOutput(entry);\n    }\n    inputEntry() {\n        return this.inputStack[this.inputStack.length - 1];\n    }\n    inputKey(entry, idx) {\n        if (!entry.keys) {\n            entry.keys = this.model.objectGetKeys(entry.value).sort();\n        }\n        return entry.keys[idx];\n    }\n    outputEntry() {\n        return this.outputStack[this.outputStack.length - 1];\n    }\n    outputArray() {\n        let entry = this.outputEntry();\n        if (!entry.writeValue) {\n            entry.writeValue = this.model.copyArray(entry.value);\n        }\n        return entry.writeValue;\n    }\n    outputObject() {\n        let entry = this.outputEntry();\n        if (!entry.writeValue) {\n            entry.writeValue = this.model.copyObject(entry.value);\n        }\n        return entry.writeValue;\n    }\n    outputString() {\n        let entry = this.outputEntry();\n        if (!entry.writeValue) {\n            entry.writeValue = this.model.copyString(entry.value);\n        }\n        return entry.writeValue;\n    }\n    finalizeOutput(entry) {\n        if (entry.writeValue) {\n            return this.model.finalize(entry.writeValue);\n        } else {\n            return entry.value;\n        }\n    }\n    // Processors:\n    processValue() {\n        let value = this.model.wrap(this.read());\n        this.outputStack.push({\n            value\n        });\n    }\n    processCopy() {\n        let input = this.inputEntry();\n        this.outputStack.push({\n            value: input.value\n        });\n    }\n    processBlank() {\n        this.outputStack.push({\n            value: null\n        });\n    }\n    processReturnIntoArray() {\n        let entry = this.outputStack.pop();\n        let result = this.finalizeOutput(entry);\n        let arr = this.outputArray();\n        this.model.arrayAppendValue(arr, result);\n    }\n    processReturnIntoObject() {\n        let key = this.read();\n        let entry = this.outputStack.pop();\n        let result = this.finalizeOutput(entry);\n        result = this.model.markChanged(result);\n        let obj = this.outputObject();\n        this.model.objectSetField(obj, key, result);\n    }\n    processReturnIntoObjectSameKey() {\n        let input = this.inputEntry();\n        let entry = this.outputStack.pop();\n        let result = this.finalizeOutput(entry);\n        let obj = this.outputObject();\n        this.model.objectSetField(obj, input.key, result);\n    }\n    processPushField() {\n        let idx = this.read();\n        let entry = this.inputEntry();\n        let key = this.inputKey(entry, idx);\n        let value = this.model.objectGetField(entry.value, key);\n        this.inputStack.push({\n            value,\n            key\n        });\n    }\n    processPushElement() {\n        let idx = this.read();\n        let entry = this.inputEntry();\n        let value = this.model.arrayGetElement(entry.value, idx);\n        this.inputStack.push({\n            value\n        });\n    }\n    processPop() {\n        this.inputStack.pop();\n    }\n    processPushFieldCopy() {\n        this.processPushField();\n        this.processCopy();\n    }\n    processPushFieldBlank() {\n        this.processPushField();\n        this.processBlank();\n    }\n    processPushElementCopy() {\n        this.processPushElement();\n        this.processCopy();\n    }\n    processPushElementBlank() {\n        this.processPushElement();\n        this.processBlank();\n    }\n    processReturnIntoObjectPop() {\n        this.processReturnIntoObject();\n        this.processPop();\n    }\n    processReturnIntoObjectSameKeyPop() {\n        this.processReturnIntoObjectSameKey();\n        this.processPop();\n    }\n    processReturnIntoArrayPop() {\n        this.processReturnIntoArray();\n        this.processPop();\n    }\n    processObjectSetFieldValue() {\n        this.processValue();\n        this.processReturnIntoObject();\n    }\n    processObjectCopyField() {\n        this.processPushField();\n        this.processCopy();\n        this.processReturnIntoObjectSameKey();\n        this.processPop();\n    }\n    processObjectDeleteField() {\n        let idx = this.read();\n        let entry = this.inputEntry();\n        let key = this.inputKey(entry, idx);\n        let obj = this.outputObject();\n        this.model.objectDeleteField(obj, key);\n    }\n    processArrayAppendValue() {\n        let value = this.model.wrap(this.read());\n        let arr = this.outputArray();\n        this.model.arrayAppendValue(arr, value);\n    }\n    processArrayAppendSlice() {\n        let left = this.read();\n        let right = this.read();\n        let str = this.outputArray();\n        let val = this.inputEntry().value;\n        this.model.arrayAppendSlice(str, val, left, right);\n    }\n    processStringAppendString() {\n        let value = this.model.wrap(this.read());\n        let str = this.outputString();\n        this.model.stringAppendValue(str, value);\n    }\n    processStringAppendSlice() {\n        let left = this.read();\n        let right = this.read();\n        let str = this.outputString();\n        let val = this.inputEntry().value;\n        this.model.stringAppendSlice(str, val, left, right);\n    }\n}\nfunction utf8charSize(code) {\n    if (code >> 16) {\n        return 4;\n    } else if (code >> 11) {\n        return 3;\n    } else if (code >> 7) {\n        return 2;\n    } else {\n        return 1;\n    }\n}\nfunction utf8stringSize(str) {\n    let b = 0;\n    for(let i = 0; i < str.length; i++){\n        let code = str.codePointAt(i);\n        let size = utf8charSize(code);\n        if (size == 4) i++;\n        b += size;\n    }\n    return b;\n}\nfunction utf8resolveIndex(str, idx) {\n    let start = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let byteCount = start;\n    let ucsIdx = 0;\n    for(ucsIdx = start; byteCount < idx; ucsIdx++){\n        let code = str.codePointAt(ucsIdx);\n        let size = utf8charSize(code);\n        if (size === 4) ucsIdx++;\n        byteCount += size;\n    }\n    return ucsIdx;\n}\nfunction commonPrefix(str, str2) {\n    let len = Math.min(str.length, str2.length);\n    let b = 0;\n    for(let i = 0; i < len;){\n        let aPoint = str.codePointAt(i);\n        let bPoint = str2.codePointAt(i);\n        if (aPoint !== bPoint) return b;\n        let size = utf8charSize(aPoint);\n        b += size;\n        i += size === 4 ? 2 : 1;\n    }\n    return b;\n}\nfunction commonSuffix(str, str2) {\n    let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let len = Math.min(str.length, str2.length) - prefix;\n    let b = 0;\n    for(let i = 0; i < len;){\n        let aPoint = str.codePointAt(str.length - 1 - i);\n        let bPoint = str2.codePointAt(str2.length - 1 - i);\n        if (aPoint !== bPoint) return b;\n        let size = utf8charSize(aPoint);\n        b += size;\n        i += size === 4 ? 2 : 1;\n    }\n    return b;\n}\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nclass IncrementalModel {\n    constructor(meta){\n        __publicField(this, \"meta\");\n        this.meta = meta;\n    }\n    wrap(data) {\n        return this.wrapWithMeta(data, this.meta, this.meta);\n    }\n    wrapWithMeta(data, startMeta) {\n        let endMeta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.meta;\n        return {\n            data,\n            startMeta,\n            endMeta\n        };\n    }\n    asObject(value) {\n        if (!value.content) {\n            let fields = {};\n            for (let [key, val] of Object.entries(value.data)){\n                fields[key] = this.wrapWithMeta(val, value.startMeta);\n            }\n            value.content = {\n                type: \"object\",\n                fields\n            };\n        }\n        return value.content;\n    }\n    asArray(value) {\n        if (!value.content) {\n            let elements = value.data.map((item)=>this.wrapWithMeta(item, value.startMeta));\n            let metas = elements.map(()=>this.meta);\n            value.content = {\n                type: \"array\",\n                elements,\n                metas\n            };\n        }\n        return value.content;\n    }\n    asString(value) {\n        if (!value.content) {\n            let str = value.data;\n            let part = {\n                value: str,\n                utf8size: utf8stringSize(str),\n                uses: [],\n                startMeta: value.startMeta,\n                endMeta: value.endMeta\n            };\n            value.content = this.stringFromParts([\n                part\n            ]);\n        }\n        return value.content;\n    }\n    stringFromParts(parts) {\n        let str = {\n            type: \"string\",\n            parts\n        };\n        for (let part of parts){\n            part.uses.push(str);\n        }\n        return str;\n    }\n    objectGetKeys(value) {\n        if (value.content) {\n            return Object.keys(value.content.fields);\n        } else {\n            return Object.keys(value.data);\n        }\n    }\n    objectGetField(value, key) {\n        let obj = this.asObject(value);\n        return obj.fields[key];\n    }\n    arrayGetElement(value, idx) {\n        let arr = this.asArray(value);\n        return arr.elements[idx];\n    }\n    finalize(content) {\n        this.updateEndMeta(content);\n        return {\n            content,\n            startMeta: this.meta,\n            endMeta: this.meta\n        };\n    }\n    markChanged(value) {\n        return this.wrap(unwrap(value));\n    }\n    updateEndMeta(content) {\n        if (content.type == \"string\") {\n            for (let part of content.parts){\n                part.endMeta = this.meta;\n            }\n        } else {\n            if (content.type === \"array\") {\n                for (let val of content.elements){\n                    if (val.content && val.endMeta !== this.meta) {\n                        this.updateEndMeta(val.content);\n                    }\n                    val.endMeta = this.meta;\n                }\n            } else {\n                for (let val of Object.values(content.fields)){\n                    if (val.content && val.endMeta !== this.meta) {\n                        this.updateEndMeta(val.content);\n                    }\n                    val.endMeta = this.meta;\n                }\n            }\n        }\n    }\n    copyString(value) {\n        if (value) {\n            let other = this.asString(value);\n            return this.stringFromParts(other.parts.slice());\n        } else {\n            return {\n                type: \"string\",\n                parts: []\n            };\n        }\n    }\n    copyObject(value) {\n        let obj = {\n            type: \"object\",\n            fields: {}\n        };\n        if (value) {\n            let other = this.asObject(value);\n            Object.assign(obj.fields, other.fields);\n        }\n        return obj;\n    }\n    copyArray(value) {\n        let arr = value ? this.asArray(value) : null;\n        let elements = arr ? arr.elements : [];\n        let metas = arr ? arr.metas : [];\n        return {\n            type: \"array\",\n            elements,\n            metas\n        };\n    }\n    objectSetField(target, key, value) {\n        target.fields[key] = value;\n    }\n    objectDeleteField(target, key) {\n        delete target.fields[key];\n    }\n    arrayAppendValue(target, value) {\n        target.elements.push(value);\n        target.metas.push(this.meta);\n    }\n    arrayAppendSlice(target, source, left, right) {\n        let arr = this.asArray(source);\n        let samePosition = arr.elements.length === left;\n        target.elements.push(...arr.elements.slice(left, right));\n        if (samePosition) {\n            target.metas.push(...arr.metas.slice(left, right));\n        } else {\n            for(let i = left; i < right; i++){\n                target.metas.push(this.meta);\n            }\n        }\n    }\n    stringAppendValue(target, value) {\n        let str = this.asString(value);\n        for (let part of str.parts){\n            this.stringAppendPart(target, part);\n        }\n    }\n    stringAppendPart(target, part) {\n        target.parts.push(part);\n        part.uses.push(target);\n    }\n    resolveStringPart(str, from, len) {\n        if (len === 0) return from;\n        for(let i = from; i < str.parts.length; i++){\n            let part = str.parts[i];\n            if (len === part.utf8size) {\n                return i + 1;\n            }\n            if (len < part.utf8size) {\n                this.splitString(part, len);\n                return i + 1;\n            }\n            len -= part.utf8size;\n        }\n        throw new Error(\"splitting string out of bounds\");\n    }\n    splitString(part, idx) {\n        let leftValue;\n        let rightValue;\n        let leftSize = idx;\n        let rightSize = part.utf8size - leftSize;\n        if (part.utf8size !== part.value.length) {\n            let byteCount = 0;\n            for(idx = 0; byteCount < leftSize; idx++){\n                let code = part.value.codePointAt(idx);\n                let size = utf8charSize(code);\n                if (size === 4) idx++;\n                byteCount += size;\n            }\n        }\n        leftValue = part.value.slice(0, idx);\n        rightValue = part.value.slice(idx);\n        let newPart = {\n            value: rightValue,\n            utf8size: rightSize,\n            uses: part.uses.slice(),\n            startMeta: part.startMeta,\n            endMeta: part.endMeta\n        };\n        part.value = leftValue;\n        part.utf8size = leftSize;\n        for (let use of part.uses){\n            let ndx = use.parts.indexOf(part);\n            if (ndx === -1) throw new Error(\"bug: mismatch between string parts and use.\");\n            use.parts.splice(ndx + 1, 0, newPart);\n        }\n    }\n    stringAppendSlice(target, source, left, right) {\n        let str = this.asString(source);\n        let firstPart = this.resolveStringPart(str, 0, left);\n        let lastPart = this.resolveStringPart(str, firstPart, right - left);\n        for(let i = firstPart; i < lastPart; i++){\n            let part = str.parts[i];\n            this.stringAppendPart(target, part);\n        }\n    }\n}\nfunction wrap(data, meta) {\n    return {\n        data,\n        startMeta: meta,\n        endMeta: meta\n    };\n}\nfunction unwrap(value) {\n    if (typeof value.data !== \"undefined\") return value.data;\n    let result;\n    let content = value.content;\n    switch(content.type){\n        case \"string\":\n            result = content.parts.map((part)=>part.value).join(\"\");\n            break;\n        case \"array\":\n            result = content.elements.map((val)=>unwrap(val));\n            break;\n        case \"object\":\n            {\n                result = {};\n                for (let [key, val] of Object.entries(content.fields)){\n                    result[key] = unwrap(val);\n                }\n            }\n    }\n    value.data = result;\n    return result;\n}\nfunction getType(value) {\n    if (value.content) return value.content.type;\n    if (Array.isArray(value.data)) return \"array\";\n    if (value.data === null) return \"null\";\n    return typeof value.data;\n}\nfunction rebaseValue(left, right) {\n    let leftType = getType(left);\n    let rightType = getType(right);\n    if (leftType !== rightType) return right;\n    let leftModel = new IncrementalModel(left.endMeta);\n    let rightModel = new IncrementalModel(right.endMeta);\n    switch(leftType){\n        case \"object\":\n            {\n                let leftObj = leftModel.asObject(left);\n                let rightObj = rightModel.asObject(right);\n                let identicalFieldCount = 0;\n                let leftFieldCount = Object.keys(leftObj.fields).length;\n                let rightFieldCount = Object.keys(rightObj.fields).length;\n                for (let [key, rightVal] of Object.entries(rightObj.fields)){\n                    let leftVal = leftObj.fields[key];\n                    if (leftVal) {\n                        rightObj.fields[key] = rebaseValue(leftVal, rightVal);\n                        if (rightObj.fields[key] === leftVal) {\n                            identicalFieldCount++;\n                        }\n                    }\n                }\n                let isIdentical = leftFieldCount === rightFieldCount && leftFieldCount === identicalFieldCount;\n                return isIdentical ? left : right;\n            }\n        case \"array\":\n            {\n                let leftArr = leftModel.asArray(left);\n                let rightArr = rightModel.asArray(right);\n                if (leftArr.elements.length !== rightArr.elements.length) {\n                    break;\n                }\n                let numRebased = 0;\n                for(let i = 0; i < rightArr.elements.length; i++){\n                    rightArr.elements[i] = rebaseValue(leftArr.elements[i], rightArr.elements[i]);\n                    if (rightArr.elements[i] !== leftArr.elements[i]) {\n                        numRebased++;\n                    }\n                }\n                return numRebased === 0 ? left : right;\n            }\n        case \"null\":\n        case \"boolean\":\n        case \"number\":\n            {\n                if (unwrap(left) === unwrap(right)) return left;\n                break;\n            }\n        case \"string\":\n            {\n                let leftRaw = unwrap(left);\n                let rightRaw = unwrap(right);\n                if (leftRaw === rightRaw) return left;\n                let result = rightModel.copyString(null);\n                let prefix = commonPrefix(leftRaw, rightRaw);\n                let suffix = commonSuffix(leftRaw, rightRaw, prefix);\n                let rightLen = utf8stringSize(rightRaw);\n                let leftLen = utf8stringSize(leftRaw);\n                if (0 < prefix) {\n                    rightModel.stringAppendSlice(result, left, 0, prefix);\n                }\n                if (prefix < rightLen - suffix) {\n                    rightModel.stringAppendSlice(result, right, prefix, rightLen - suffix);\n                }\n                if (leftLen - suffix < leftLen) {\n                    rightModel.stringAppendSlice(result, left, leftLen - suffix, leftLen);\n                }\n                let value = rightModel.finalize(result);\n                if (unwrap(value) !== rightRaw) throw new Error(\"incorrect string rebase\");\n                return value;\n            }\n    }\n    return right;\n}\nfunction applyPatch$1(left, patch, startMeta) {\n    let model = new IncrementalModel(startMeta);\n    let patcher = new Patcher(model, left, patch);\n    return patcher.process();\n}\nvar incrementalPatcher = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    applyPatch: applyPatch$1,\n    getType: getType,\n    rebaseValue: rebaseValue,\n    unwrap: unwrap,\n    wrap: wrap\n});\nclass SimpleModel {\n    wrap(data) {\n        return data;\n    }\n    finalize(b) {\n        if (Array.isArray(b)) {\n            return b;\n        } else {\n            return b.data;\n        }\n    }\n    markChanged(value) {\n        return value;\n    }\n    objectGetKeys(value) {\n        return Object.keys(value);\n    }\n    objectGetField(value, key) {\n        return value[key];\n    }\n    arrayGetElement(value, idx) {\n        return value[idx];\n    }\n    copyObject(value) {\n        let res = {\n            type: \"object\",\n            data: {}\n        };\n        if (value !== null) {\n            for (let [key, val] of Object.entries(value)){\n                res.data[key] = val;\n            }\n        }\n        return res;\n    }\n    copyArray(value) {\n        if (value === null) return [];\n        return value.slice();\n    }\n    copyString(value) {\n        return {\n            type: \"string\",\n            data: value === null ? \"\" : value\n        };\n    }\n    objectSetField(target, key, value) {\n        target.data[key] = value;\n    }\n    objectDeleteField(target, key) {\n        delete target.data[key];\n    }\n    arrayAppendValue(target, value) {\n        target.push(value);\n    }\n    arrayAppendSlice(target, source, left, right) {\n        target.push(...source.slice(left, right));\n    }\n    stringAppendSlice(target, source, left, right) {\n        const sourceString = source;\n        const leftPos = utf8resolveIndex(sourceString, left);\n        const rightPos = utf8resolveIndex(sourceString, right, leftPos);\n        target.data += sourceString.slice(leftPos, rightPos);\n    }\n    stringAppendValue(target, value) {\n        target.data += value;\n    }\n}\nfunction applyPatch(left, patch) {\n    let root = left;\n    let patcher = new Patcher(new SimpleModel(), root, patch);\n    return patcher.process();\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mendoza/dist/index.js\n");

/***/ })

};
;