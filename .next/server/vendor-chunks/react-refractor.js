"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-refractor";
exports.ids = ["vendor-chunks/react-refractor"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-refractor/lib/Refractor.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-refractor/lib/Refractor.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar PropTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar fract = __webpack_require__(/*! refractor/core.js */ \"(ssr)/./node_modules/refractor/core.js\");\nvar mapChildren = __webpack_require__(/*! ./mapChildren */ \"(ssr)/./node_modules/react-refractor/lib/mapChildren.js\");\nvar addMarkers = __webpack_require__(/*! ./addMarkers */ \"(ssr)/./node_modules/react-refractor/lib/addMarkers.js\"); // eslint-disable-next-line id-length\nvar h = React.createElement;\nfunction Refractor(props) {\n    if (true) {\n        if (!fract.registered(props.language)) {\n            // eslint-disable-next-line no-console\n            console.warn('No language definitions for \"'.concat(props.language, '\" seems to be registered, did you forget to call `Refractor.registerLanguage()`?'));\n        }\n    }\n    var langClassName = \"language-\".concat(props.language);\n    var codeProps = {\n        className: langClassName\n    };\n    var preProps = {\n        className: [\n            props.className,\n            langClassName\n        ].filter(Boolean).join(\" \")\n    };\n    if (props.inline) {\n        codeProps.style = {\n            display: \"inline\"\n        };\n        codeProps.className = props.className;\n    }\n    var ast = fract.highlight(props.value, props.language);\n    if (props.markers && props.markers.length > 0) {\n        ast = addMarkers(ast, {\n            markers: props.markers\n        });\n    }\n    var value = ast.length === 0 ? props.value : ast.map(mapChildren.depth(0));\n    var code = h(\"code\", codeProps, value);\n    return props.inline ? code : h(\"pre\", preProps, code);\n}\nRefractor.propTypes = {\n    className: PropTypes.string,\n    inline: PropTypes.bool,\n    language: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    markers: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.shape({\n            line: PropTypes.number.isRequired,\n            className: PropTypes.string,\n            component: PropTypes.oneOfType([\n                PropTypes.node,\n                PropTypes.func\n            ])\n        })\n    ]))\n};\nRefractor.defaultProps = {\n    className: \"refractor\",\n    inline: false\n};\nRefractor.registerLanguage = function(lang) {\n    return fract.register(lang);\n};\nRefractor.hasLanguage = function(lang) {\n    return fract.registered(lang);\n};\nmodule.exports = Refractor; //# sourceMappingURL=Refractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9SZWZyYWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQixJQUFJQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUV4QixJQUFJRSxRQUFRRixtQkFBT0EsQ0FBQztBQUVwQixJQUFJRyxjQUFjSCxtQkFBT0EsQ0FBQztBQUUxQixJQUFJSSxhQUFhSixtQkFBT0EsQ0FBQywrRUFBaUIscUNBQXFDO0FBRy9FLElBQUlLLElBQUlOLE1BQU1PLGFBQWE7QUFFM0IsU0FBU0MsVUFBVUMsS0FBSztJQUN0QixJQUFJQyxJQUF5QixFQUFjO1FBQ3pDLElBQUksQ0FBQ1AsTUFBTVEsVUFBVSxDQUFDRixNQUFNRyxRQUFRLEdBQUc7WUFDckMsc0NBQXNDO1lBQ3RDQyxRQUFRQyxJQUFJLENBQUMsZ0NBQWlDQyxNQUFNLENBQUNOLE1BQU1HLFFBQVEsRUFBRTtRQUN2RTtJQUNGO0lBRUEsSUFBSUksZ0JBQWdCLFlBQVlELE1BQU0sQ0FBQ04sTUFBTUcsUUFBUTtJQUNyRCxJQUFJSyxZQUFZO1FBQ2RDLFdBQVdGO0lBQ2I7SUFDQSxJQUFJRyxXQUFXO1FBQ2JELFdBQVc7WUFBQ1QsTUFBTVMsU0FBUztZQUFFRjtTQUFjLENBQUNJLE1BQU0sQ0FBQ0MsU0FBU0MsSUFBSSxDQUFDO0lBQ25FO0lBRUEsSUFBSWIsTUFBTWMsTUFBTSxFQUFFO1FBQ2hCTixVQUFVTyxLQUFLLEdBQUc7WUFDaEJDLFNBQVM7UUFDWDtRQUNBUixVQUFVQyxTQUFTLEdBQUdULE1BQU1TLFNBQVM7SUFDdkM7SUFFQSxJQUFJUSxNQUFNdkIsTUFBTXdCLFNBQVMsQ0FBQ2xCLE1BQU1tQixLQUFLLEVBQUVuQixNQUFNRyxRQUFRO0lBRXJELElBQUlILE1BQU1vQixPQUFPLElBQUlwQixNQUFNb0IsT0FBTyxDQUFDQyxNQUFNLEdBQUcsR0FBRztRQUM3Q0osTUFBTXJCLFdBQVdxQixLQUFLO1lBQ3BCRyxTQUFTcEIsTUFBTW9CLE9BQU87UUFDeEI7SUFDRjtJQUVBLElBQUlELFFBQVFGLElBQUlJLE1BQU0sS0FBSyxJQUFJckIsTUFBTW1CLEtBQUssR0FBR0YsSUFBSUssR0FBRyxDQUFDM0IsWUFBWTRCLEtBQUssQ0FBQztJQUN2RSxJQUFJQyxPQUFPM0IsRUFBRSxRQUFRVyxXQUFXVztJQUNoQyxPQUFPbkIsTUFBTWMsTUFBTSxHQUFHVSxPQUFPM0IsRUFBRSxPQUFPYSxVQUFVYztBQUNsRDtBQUVBekIsVUFBVTBCLFNBQVMsR0FBRztJQUNwQmhCLFdBQVdoQixVQUFVaUMsTUFBTTtJQUMzQlosUUFBUXJCLFVBQVVrQyxJQUFJO0lBQ3RCeEIsVUFBVVYsVUFBVWlDLE1BQU0sQ0FBQ0UsVUFBVTtJQUNyQ1QsT0FBTzFCLFVBQVVpQyxNQUFNLENBQUNFLFVBQVU7SUFDbENSLFNBQVMzQixVQUFVb0MsT0FBTyxDQUFDcEMsVUFBVXFDLFNBQVMsQ0FBQztRQUFDckMsVUFBVXNDLE1BQU07UUFBRXRDLFVBQVV1QyxLQUFLLENBQUM7WUFDaEZDLE1BQU14QyxVQUFVc0MsTUFBTSxDQUFDSCxVQUFVO1lBQ2pDbkIsV0FBV2hCLFVBQVVpQyxNQUFNO1lBQzNCUSxXQUFXekMsVUFBVXFDLFNBQVMsQ0FBQztnQkFBQ3JDLFVBQVUwQyxJQUFJO2dCQUFFMUMsVUFBVTJDLElBQUk7YUFBQztRQUNqRTtLQUFHO0FBQ0w7QUFDQXJDLFVBQVVzQyxZQUFZLEdBQUc7SUFDdkI1QixXQUFXO0lBQ1hLLFFBQVE7QUFDVjtBQUVBZixVQUFVdUMsZ0JBQWdCLEdBQUcsU0FBVUMsSUFBSTtJQUN6QyxPQUFPN0MsTUFBTThDLFFBQVEsQ0FBQ0Q7QUFDeEI7QUFFQXhDLFVBQVUwQyxXQUFXLEdBQUcsU0FBVUYsSUFBSTtJQUNwQyxPQUFPN0MsTUFBTVEsVUFBVSxDQUFDcUM7QUFDMUI7QUFFQUcsT0FBT0MsT0FBTyxHQUFHNUMsV0FDakIscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5bG9hZC1wbGF5Z3JvdW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZnJhY3Rvci9saWIvUmVmcmFjdG9yLmpzP2Q4Y2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBmcmFjdCA9IHJlcXVpcmUoJ3JlZnJhY3Rvci9jb3JlLmpzJyk7XG5cbnZhciBtYXBDaGlsZHJlbiA9IHJlcXVpcmUoJy4vbWFwQ2hpbGRyZW4nKTtcblxudmFyIGFkZE1hcmtlcnMgPSByZXF1aXJlKCcuL2FkZE1hcmtlcnMnKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGlkLWxlbmd0aFxuXG5cbnZhciBoID0gUmVhY3QuY3JlYXRlRWxlbWVudDtcblxuZnVuY3Rpb24gUmVmcmFjdG9yKHByb3BzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFmcmFjdC5yZWdpc3RlcmVkKHByb3BzLmxhbmd1YWdlKSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIk5vIGxhbmd1YWdlIGRlZmluaXRpb25zIGZvciBcXFwiXCIuY29uY2F0KHByb3BzLmxhbmd1YWdlLCBcIlxcXCIgc2VlbXMgdG8gYmUgcmVnaXN0ZXJlZCwgZGlkIHlvdSBmb3JnZXQgdG8gY2FsbCBgUmVmcmFjdG9yLnJlZ2lzdGVyTGFuZ3VhZ2UoKWA/XCIpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGFuZ0NsYXNzTmFtZSA9IFwibGFuZ3VhZ2UtXCIuY29uY2F0KHByb3BzLmxhbmd1YWdlKTtcbiAgdmFyIGNvZGVQcm9wcyA9IHtcbiAgICBjbGFzc05hbWU6IGxhbmdDbGFzc05hbWVcbiAgfTtcbiAgdmFyIHByZVByb3BzID0ge1xuICAgIGNsYXNzTmFtZTogW3Byb3BzLmNsYXNzTmFtZSwgbGFuZ0NsYXNzTmFtZV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKVxuICB9O1xuXG4gIGlmIChwcm9wcy5pbmxpbmUpIHtcbiAgICBjb2RlUHJvcHMuc3R5bGUgPSB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lJ1xuICAgIH07XG4gICAgY29kZVByb3BzLmNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZTtcbiAgfVxuXG4gIHZhciBhc3QgPSBmcmFjdC5oaWdobGlnaHQocHJvcHMudmFsdWUsIHByb3BzLmxhbmd1YWdlKTtcblxuICBpZiAocHJvcHMubWFya2VycyAmJiBwcm9wcy5tYXJrZXJzLmxlbmd0aCA+IDApIHtcbiAgICBhc3QgPSBhZGRNYXJrZXJzKGFzdCwge1xuICAgICAgbWFya2VyczogcHJvcHMubWFya2Vyc1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gYXN0Lmxlbmd0aCA9PT0gMCA/IHByb3BzLnZhbHVlIDogYXN0Lm1hcChtYXBDaGlsZHJlbi5kZXB0aCgwKSk7XG4gIHZhciBjb2RlID0gaCgnY29kZScsIGNvZGVQcm9wcywgdmFsdWUpO1xuICByZXR1cm4gcHJvcHMuaW5saW5lID8gY29kZSA6IGgoJ3ByZScsIHByZVByb3BzLCBjb2RlKTtcbn1cblxuUmVmcmFjdG9yLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICBsYW5ndWFnZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBtYXJrZXJzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxpbmU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKVxuICB9KV0pKVxufTtcblJlZnJhY3Rvci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogJ3JlZnJhY3RvcicsXG4gIGlubGluZTogZmFsc2Vcbn07XG5cblJlZnJhY3Rvci5yZWdpc3Rlckxhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmcpIHtcbiAgcmV0dXJuIGZyYWN0LnJlZ2lzdGVyKGxhbmcpO1xufTtcblxuUmVmcmFjdG9yLmhhc0xhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmcpIHtcbiAgcmV0dXJuIGZyYWN0LnJlZ2lzdGVyZWQobGFuZyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZnJhY3Rvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlZnJhY3Rvci5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiUHJvcFR5cGVzIiwiZnJhY3QiLCJtYXBDaGlsZHJlbiIsImFkZE1hcmtlcnMiLCJoIiwiY3JlYXRlRWxlbWVudCIsIlJlZnJhY3RvciIsInByb3BzIiwicHJvY2VzcyIsInJlZ2lzdGVyZWQiLCJsYW5ndWFnZSIsImNvbnNvbGUiLCJ3YXJuIiwiY29uY2F0IiwibGFuZ0NsYXNzTmFtZSIsImNvZGVQcm9wcyIsImNsYXNzTmFtZSIsInByZVByb3BzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJpbmxpbmUiLCJzdHlsZSIsImRpc3BsYXkiLCJhc3QiLCJoaWdobGlnaHQiLCJ2YWx1ZSIsIm1hcmtlcnMiLCJsZW5ndGgiLCJtYXAiLCJkZXB0aCIsImNvZGUiLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJib29sIiwiaXNSZXF1aXJlZCIsImFycmF5T2YiLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJzaGFwZSIsImxpbmUiLCJjb21wb25lbnQiLCJub2RlIiwiZnVuYyIsImRlZmF1bHRQcm9wcyIsInJlZ2lzdGVyTGFuZ3VhZ2UiLCJsYW5nIiwicmVnaXN0ZXIiLCJoYXNMYW5ndWFnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/Refractor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/addMarkers.js":
/*!********************************************************!*\
  !*** ./node_modules/react-refractor/lib/addMarkers.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar filter = __webpack_require__(/*! unist-util-filter */ \"(ssr)/./node_modules/unist-util-filter/index.js\");\nvar visit = __webpack_require__(/*! unist-util-visit-parents */ \"(ssr)/./node_modules/unist-util-visit-parents/index.js\");\nvar NodeMap = __webpack_require__(/*! ./map */ \"(ssr)/./node_modules/react-refractor/lib/map.js\");\nfunction lineNumberify(ast) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        lineNumber: 1\n    };\n    return ast.reduce(function(result, node) {\n        var lineStart = context.lineNumber;\n        if (node.type === \"text\") {\n            if (node.value.indexOf(\"\\n\") === -1) {\n                node.lineStart = lineStart;\n                node.lineEnd = lineStart;\n                result.nodes.push(node);\n                return result;\n            }\n            var lines = node.value.split(\"\\n\");\n            for(var i = 0; i < lines.length; i++){\n                var lineNum = i === 0 ? context.lineNumber : ++context.lineNumber;\n                result.nodes.push({\n                    type: \"text\",\n                    value: i === lines.length - 1 ? lines[i] : \"\".concat(lines[i], \"\\n\"),\n                    lineStart: lineNum,\n                    lineEnd: lineNum\n                });\n            }\n            result.lineNumber = context.lineNumber;\n            return result;\n        }\n        if (node.children) {\n            var processed = lineNumberify(node.children, context);\n            var firstChild = processed.nodes[0];\n            var lastChild = processed.nodes[processed.nodes.length - 1];\n            node.lineStart = firstChild ? firstChild.lineStart : lineStart;\n            node.lineEnd = lastChild ? lastChild.lineEnd : lineStart;\n            node.children = processed.nodes;\n            result.lineNumber = processed.lineNumber;\n            result.nodes.push(node);\n            return result;\n        }\n        result.nodes.push(node);\n        return result;\n    }, {\n        nodes: [],\n        lineNumber: context.lineNumber\n    });\n}\nfunction unwrapLine(markerLine, nodes) {\n    var tree = {\n        type: \"root\",\n        children: nodes\n    };\n    var headMap = new NodeMap();\n    var lineMap = new NodeMap();\n    var tailMap = new NodeMap();\n    var cloned = [];\n    function addCopy(map, node, ancestors) {\n        cloned.push(node);\n        ancestors.forEach(function(ancestor) {\n            if (!map.has(ancestor)) {\n                map.set(ancestor, Object.assign({}, ancestor, {\n                    children: []\n                }));\n                if (ancestor !== tree) {\n                    cloned.push(ancestor);\n                }\n            }\n        });\n        var i = ancestors.length;\n        while(i--){\n            var ancestor = map.get(ancestors[i]);\n            var child = ancestors[i + 1];\n            var leaf = map.get(child) || node;\n            if (ancestor.children.indexOf(leaf) === -1) {\n                ancestor.children.push(leaf);\n            }\n        }\n    }\n    visit(tree, function(node, ancestors) {\n        if (node.children) {\n            return;\n        } // These nodes are on previous lines, but nested within the same structure\n        if (node.lineStart < markerLine) {\n            addCopy(headMap, node, ancestors);\n            return;\n        } // These nodes are on the target line\n        if (node.lineStart === markerLine) {\n            addCopy(lineMap, node, ancestors);\n            return;\n        } // If we have shared ancestors with some of the cloned elements,\n        // create another tree of the remaining nodes\n        if (node.lineEnd > markerLine && cloned.some(function(clone) {\n            return ancestors.indexOf(clone) !== -1;\n        })) {\n            addCopy(tailMap, node, ancestors);\n        }\n    }); // Get the remaining nodes - the ones who were not part of the same tree\n    var filtered = filter(tree, function(node) {\n        return cloned.indexOf(node) === -1;\n    });\n    var getChildren = function getChildren(map) {\n        var rootNode = map.get(tree);\n        if (!rootNode) {\n            return [];\n        }\n        visit(rootNode, function(leaf, ancestors) {\n            if (leaf.children) {\n                leaf.lineStart = 0;\n                leaf.lineEnd = 0;\n                return;\n            }\n            ancestors.forEach(function(ancestor) {\n                ancestor.lineStart = Math.max(ancestor.lineStart, leaf.lineStart);\n                ancestor.lineEnd = Math.max(ancestor.lineEnd, leaf.lineEnd);\n            });\n        });\n        return rootNode.children;\n    };\n    var merged = [].concat(getChildren(headMap), getChildren(lineMap), getChildren(tailMap), filtered ? filtered.children : []);\n    headMap.clear();\n    lineMap.clear();\n    tailMap.clear();\n    return merged;\n}\nfunction wrapBatch(children, marker, options) {\n    var className = marker.className || \"refractor-marker\";\n    return {\n        type: \"element\",\n        tagName: marker.component || \"div\",\n        properties: marker.component ? Object.assign({}, options, {\n            className: className\n        }) : {\n            className: className\n        },\n        children: children,\n        lineStart: marker.line,\n        lineEnd: children[children.length - 1].lineEnd,\n        isMarker: true\n    };\n}\nfunction wrapLines(treeNodes, markers, options) {\n    if (markers.length === 0 || treeNodes.length === 0) {\n        return treeNodes;\n    }\n    var ast = markers.reduce(function(acc, marker) {\n        return unwrapLine(marker.line, acc);\n    }, treeNodes); // Container for the new AST\n    var wrapped = []; // Note: Markers are already sorted by line number (ascending)\n    var astIndex = 0;\n    for(var m = 0; m < markers.length; m++){\n        var marker = markers[m]; // Start by eating all AST nodes with line numbers up to the given marker\n        for(var node = ast[astIndex]; node && node.lineEnd < marker.line; node = ast[++astIndex]){\n            wrapped.push(node);\n        } // Now proceed to find all _contiguous_ nodes on the same line\n        var batch = [];\n        for(var _node = ast[astIndex]; _node && _node.lineEnd === marker.line; _node = ast[++astIndex]){\n            batch.push(_node);\n        } // Now add that batch, if we have anything\n        if (batch.length > 0) {\n            wrapped.push(wrapBatch(batch, marker, options));\n        }\n    } // Now add the remaining AST nodes\n    while(astIndex < ast.length){\n        wrapped.push(ast[astIndex++]);\n    }\n    return wrapped;\n}\nfunction addMarkers(ast, options) {\n    var markers = options.markers.map(function(marker) {\n        return marker.line ? marker : {\n            line: marker\n        };\n    }).sort(function(nodeA, nodeB) {\n        return nodeA.line - nodeB.line;\n    });\n    var numbered = lineNumberify(ast).nodes;\n    return wrapLines(numbered, markers, options);\n}\nmodule.exports = addMarkers; //# sourceMappingURL=addMarkers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/addMarkers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/map.js":
/*!*************************************************!*\
  !*** ./node_modules/react-refractor/lib/map.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n/**\n * Weird \"map\" polyfill, that's weak if possible\n */ module.exports = typeof WeakMap === \"function\" ? HappyMap : SadMap; // Happy path! Fakes a `clear()` if possible (noop)\nfunction HappyMap() {\n    this.map = new WeakMap();\n}\nHappyMap.prototype.has = function(key) {\n    return this.map.has(key);\n};\nHappyMap.prototype.set = function(key, value) {\n    this.map.set(key, value);\n    return this;\n};\nHappyMap.prototype.get = function(key) {\n    return this.map.get(key);\n};\nHappyMap.prototype.clear = function() {}; // Sad path! Use less stylish approach\nfunction SadMap() {\n    this.keys = [];\n    this.values = [];\n}\nSadMap.prototype.has = function(key) {\n    return this.keys.indexOf(key) !== -1;\n};\nSadMap.prototype.set = function(key, value) {\n    var index = this.keys.indexOf(key);\n    if (index === -1) {\n        this.keys.push(key);\n        this.values.push(value);\n    } else {\n        this.values[index] = value;\n    }\n    return this;\n};\nSadMap.prototype.get = function(key) {\n    var index = this.keys.indexOf(key);\n    return index === -1 ? undefined : this.values[index];\n};\nSadMap.prototype.clear = function() {\n    this.keys = [];\n    this.values = [];\n}; //# sourceMappingURL=map.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9tYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Q0FFQyxHQUNEQSxPQUFPQyxPQUFPLEdBQUcsT0FBT0MsWUFBWSxhQUFhQyxXQUFXQyxRQUFRLG1EQUFtRDtBQUV2SCxTQUFTRDtJQUNQLElBQUksQ0FBQ0UsR0FBRyxHQUFHLElBQUlIO0FBQ2pCO0FBRUFDLFNBQVNHLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFNBQVVDLEdBQUc7SUFDcEMsT0FBTyxJQUFJLENBQUNILEdBQUcsQ0FBQ0UsR0FBRyxDQUFDQztBQUN0QjtBQUVBTCxTQUFTRyxTQUFTLENBQUNHLEdBQUcsR0FBRyxTQUFVRCxHQUFHLEVBQUVFLEtBQUs7SUFDM0MsSUFBSSxDQUFDTCxHQUFHLENBQUNJLEdBQUcsQ0FBQ0QsS0FBS0U7SUFDbEIsT0FBTyxJQUFJO0FBQ2I7QUFFQVAsU0FBU0csU0FBUyxDQUFDSyxHQUFHLEdBQUcsU0FBVUgsR0FBRztJQUNwQyxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDTSxHQUFHLENBQUNIO0FBQ3RCO0FBRUFMLFNBQVNHLFNBQVMsQ0FBQ00sS0FBSyxHQUFHLFlBQzNCLEdBQUcsc0NBQXNDO0FBR3pDLFNBQVNSO0lBQ1AsSUFBSSxDQUFDUyxJQUFJLEdBQUcsRUFBRTtJQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7QUFDbEI7QUFFQVYsT0FBT0UsU0FBUyxDQUFDQyxHQUFHLEdBQUcsU0FBVUMsR0FBRztJQUNsQyxPQUFPLElBQUksQ0FBQ0ssSUFBSSxDQUFDRSxPQUFPLENBQUNQLFNBQVMsQ0FBQztBQUNyQztBQUVBSixPQUFPRSxTQUFTLENBQUNHLEdBQUcsR0FBRyxTQUFVRCxHQUFHLEVBQUVFLEtBQUs7SUFDekMsSUFBSU0sUUFBUSxJQUFJLENBQUNILElBQUksQ0FBQ0UsT0FBTyxDQUFDUDtJQUU5QixJQUFJUSxVQUFVLENBQUMsR0FBRztRQUNoQixJQUFJLENBQUNILElBQUksQ0FBQ0ksSUFBSSxDQUFDVDtRQUNmLElBQUksQ0FBQ00sTUFBTSxDQUFDRyxJQUFJLENBQUNQO0lBQ25CLE9BQU87UUFDTCxJQUFJLENBQUNJLE1BQU0sQ0FBQ0UsTUFBTSxHQUFHTjtJQUN2QjtJQUVBLE9BQU8sSUFBSTtBQUNiO0FBRUFOLE9BQU9FLFNBQVMsQ0FBQ0ssR0FBRyxHQUFHLFNBQVVILEdBQUc7SUFDbEMsSUFBSVEsUUFBUSxJQUFJLENBQUNILElBQUksQ0FBQ0UsT0FBTyxDQUFDUDtJQUM5QixPQUFPUSxVQUFVLENBQUMsSUFBSUUsWUFBWSxJQUFJLENBQUNKLE1BQU0sQ0FBQ0UsTUFBTTtBQUN0RDtBQUVBWixPQUFPRSxTQUFTLENBQUNNLEtBQUssR0FBRztJQUN2QixJQUFJLENBQUNDLElBQUksR0FBRyxFQUFFO0lBQ2QsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtBQUNsQixHQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BheWxvYWQtcGxheWdyb3VuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWZyYWN0b3IvbGliL21hcC5qcz80NTJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFdlaXJkIFwibWFwXCIgcG9seWZpbGwsIHRoYXQncyB3ZWFrIGlmIHBvc3NpYmxlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgPyBIYXBweU1hcCA6IFNhZE1hcDsgLy8gSGFwcHkgcGF0aCEgRmFrZXMgYSBgY2xlYXIoKWAgaWYgcG9zc2libGUgKG5vb3ApXG5cbmZ1bmN0aW9uIEhhcHB5TWFwKCkge1xuICB0aGlzLm1hcCA9IG5ldyBXZWFrTWFwKCk7XG59XG5cbkhhcHB5TWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXMoa2V5KTtcbn07XG5cbkhhcHB5TWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0aGlzLm1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuSGFwcHlNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpO1xufTtcblxuSGFwcHlNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkgey8vIGludGVudGlvbmFsIG5vb3AsIHNpbmNlIHdlIGRvbnQgbmVlZCB0by9jYW50IGNsZWFyXG59OyAvLyBTYWQgcGF0aCEgVXNlIGxlc3Mgc3R5bGlzaCBhcHByb2FjaFxuXG5cbmZ1bmN0aW9uIFNhZE1hcCgpIHtcbiAgdGhpcy5rZXlzID0gW107XG4gIHRoaXMudmFsdWVzID0gW107XG59XG5cblNhZE1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTE7XG59O1xuXG5TYWRNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XG5cbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIHRoaXMua2V5cy5wdXNoKGtleSk7XG4gICAgdGhpcy52YWx1ZXMucHVzaCh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy52YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cblNhZE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICB2YXIgaW5kZXggPSB0aGlzLmtleXMuaW5kZXhPZihrZXkpO1xuICByZXR1cm4gaW5kZXggPT09IC0xID8gdW5kZWZpbmVkIDogdGhpcy52YWx1ZXNbaW5kZXhdO1xufTtcblxuU2FkTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5rZXlzID0gW107XG4gIHRoaXMudmFsdWVzID0gW107XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiV2Vha01hcCIsIkhhcHB5TWFwIiwiU2FkTWFwIiwibWFwIiwicHJvdG90eXBlIiwiaGFzIiwia2V5Iiwic2V0IiwidmFsdWUiLCJnZXQiLCJjbGVhciIsImtleXMiLCJ2YWx1ZXMiLCJpbmRleE9mIiwiaW5kZXgiLCJwdXNoIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/mapChildren.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-refractor/lib/mapChildren.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction mapChild(child, i, depth) {\n    if (child.tagName) {\n        var className = child.properties && Array.isArray(child.properties.className) ? child.properties.className.join(\" \") : child.properties.className;\n        return React.createElement(child.tagName, Object.assign({\n            key: \"fract-\".concat(depth, \"-\").concat(i)\n        }, child.properties, {\n            className: className\n        }), child.children && child.children.map(mapWithDepth(depth + 1)));\n    }\n    return child.value;\n}\nfunction mapWithDepth(depth) {\n    return function mapChildrenWithDepth(child, i) {\n        return mapChild(child, i, depth);\n    };\n}\nexports.depth = mapWithDepth; //# sourceMappingURL=mapChildren.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9tYXBDaGlsZHJlbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLFNBQVNDLFNBQVNDLEtBQUssRUFBRUMsQ0FBQyxFQUFFQyxLQUFLO0lBQy9CLElBQUlGLE1BQU1HLE9BQU8sRUFBRTtRQUNqQixJQUFJQyxZQUFZSixNQUFNSyxVQUFVLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ1AsTUFBTUssVUFBVSxDQUFDRCxTQUFTLElBQUlKLE1BQU1LLFVBQVUsQ0FBQ0QsU0FBUyxDQUFDSSxJQUFJLENBQUMsT0FBT1IsTUFBTUssVUFBVSxDQUFDRCxTQUFTO1FBQ2pKLE9BQU9QLE1BQU1ZLGFBQWEsQ0FBQ1QsTUFBTUcsT0FBTyxFQUFFTyxPQUFPQyxNQUFNLENBQUM7WUFDdERDLEtBQUssU0FBU0MsTUFBTSxDQUFDWCxPQUFPLEtBQUtXLE1BQU0sQ0FBQ1o7UUFDMUMsR0FBR0QsTUFBTUssVUFBVSxFQUFFO1lBQ25CRCxXQUFXQTtRQUNiLElBQUlKLE1BQU1jLFFBQVEsSUFBSWQsTUFBTWMsUUFBUSxDQUFDQyxHQUFHLENBQUNDLGFBQWFkLFFBQVE7SUFDaEU7SUFFQSxPQUFPRixNQUFNaUIsS0FBSztBQUNwQjtBQUVBLFNBQVNELGFBQWFkLEtBQUs7SUFDekIsT0FBTyxTQUFTZ0IscUJBQXFCbEIsS0FBSyxFQUFFQyxDQUFDO1FBQzNDLE9BQU9GLFNBQVNDLE9BQU9DLEdBQUdDO0lBQzVCO0FBQ0Y7QUFFQWlCLGFBQWEsR0FBR0gsY0FDaEIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5bG9hZC1wbGF5Z3JvdW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZnJhY3Rvci9saWIvbWFwQ2hpbGRyZW4uanM/NjA4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuZnVuY3Rpb24gbWFwQ2hpbGQoY2hpbGQsIGksIGRlcHRoKSB7XG4gIGlmIChjaGlsZC50YWdOYW1lKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IGNoaWxkLnByb3BlcnRpZXMgJiYgQXJyYXkuaXNBcnJheShjaGlsZC5wcm9wZXJ0aWVzLmNsYXNzTmFtZSkgPyBjaGlsZC5wcm9wZXJ0aWVzLmNsYXNzTmFtZS5qb2luKCcgJykgOiBjaGlsZC5wcm9wZXJ0aWVzLmNsYXNzTmFtZTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjaGlsZC50YWdOYW1lLCBPYmplY3QuYXNzaWduKHtcbiAgICAgIGtleTogXCJmcmFjdC1cIi5jb25jYXQoZGVwdGgsIFwiLVwiKS5jb25jYXQoaSlcbiAgICB9LCBjaGlsZC5wcm9wZXJ0aWVzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgIH0pLCBjaGlsZC5jaGlsZHJlbiAmJiBjaGlsZC5jaGlsZHJlbi5tYXAobWFwV2l0aERlcHRoKGRlcHRoICsgMSkpKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZC52YWx1ZTtcbn1cblxuZnVuY3Rpb24gbWFwV2l0aERlcHRoKGRlcHRoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBtYXBDaGlsZHJlbldpdGhEZXB0aChjaGlsZCwgaSkge1xuICAgIHJldHVybiBtYXBDaGlsZChjaGlsZCwgaSwgZGVwdGgpO1xuICB9O1xufVxuXG5leHBvcnRzLmRlcHRoID0gbWFwV2l0aERlcHRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwQ2hpbGRyZW4uanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIm1hcENoaWxkIiwiY2hpbGQiLCJpIiwiZGVwdGgiLCJ0YWdOYW1lIiwiY2xhc3NOYW1lIiwicHJvcGVydGllcyIsIkFycmF5IiwiaXNBcnJheSIsImpvaW4iLCJjcmVhdGVFbGVtZW50IiwiT2JqZWN0IiwiYXNzaWduIiwia2V5IiwiY29uY2F0IiwiY2hpbGRyZW4iLCJtYXAiLCJtYXBXaXRoRGVwdGgiLCJ2YWx1ZSIsIm1hcENoaWxkcmVuV2l0aERlcHRoIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/mapChildren.js\n");

/***/ })

};
;